<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-POD63J8" failures="2" tests="50" name="Tests.AirbnbTests1" time="655.208" errors="0" timestamp="2021-03-02T12:41:17 IST" skipped="44">
  <testcase classname="Tests.AirbnbTests1" name="test2" time="90.504">
    <failure message="expected [Stay in Bengaluru] but found [Stays in Bengaluru]" type="java.lang.AssertionError">
      <![CDATA[java.lang.AssertionError: expected [Stay in Bengaluru] but found [Stays in Bengaluru]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at Tests.AirbnbTests1.test2(AirbnbTests1.java:64)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
    </failure>
  </testcase> <!-- test2 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test4" time="116.190"/>
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test4" time="110.104"/>
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test1" time="130.258"/>
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test2" time="92.564">
    <failure message="expected [Stay in Bengaluru] but found [Stays in Bengaluru]" type="java.lang.AssertionError">
      <![CDATA[java.lang.AssertionError: expected [Stay in Bengaluru] but found [Stays in Bengaluru]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at Tests.AirbnbTests1.test2(AirbnbTests1.java:64)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
    </failure>
  </testcase> <!-- test2 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test1" time="115.588"/>
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test19">
    <skipped/>
  </testcase> <!-- test19 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test19">
    <skipped/>
  </testcase> <!-- test19 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test17">
    <skipped/>
  </testcase> <!-- test17 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test17">
    <skipped/>
  </testcase> <!-- test17 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test18">
    <skipped/>
  </testcase> <!-- test18 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test18">
    <skipped/>
  </testcase> <!-- test18 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test13">
    <skipped/>
  </testcase> <!-- test13 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test13">
    <skipped/>
  </testcase> <!-- test13 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test16">
    <skipped/>
  </testcase> <!-- test16 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test16">
    <skipped/>
  </testcase> <!-- test16 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test11">
    <skipped/>
  </testcase> <!-- test11 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test11">
    <skipped/>
  </testcase> <!-- test11 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test14">
    <skipped/>
  </testcase> <!-- test14 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test14">
    <skipped/>
  </testcase> <!-- test14 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test12">
    <skipped/>
  </testcase> <!-- test12 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test12">
    <skipped/>
  </testcase> <!-- test12 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test10">
    <skipped/>
  </testcase> <!-- test10 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test10">
    <skipped/>
  </testcase> <!-- test10 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test15">
    <skipped/>
  </testcase> <!-- test15 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test15">
    <skipped/>
  </testcase> <!-- test15 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test5">
    <skipped/>
  </testcase> <!-- test5 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test5">
    <skipped/>
  </testcase> <!-- test5 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test3">
    <skipped/>
  </testcase> <!-- test3 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test3">
    <skipped/>
  </testcase> <!-- test3 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test9">
    <skipped/>
  </testcase> <!-- test9 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test9">
    <skipped/>
  </testcase> <!-- test9 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test6">
    <skipped/>
  </testcase> <!-- test6 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test6">
    <skipped/>
  </testcase> <!-- test6 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test7">
    <skipped/>
  </testcase> <!-- test7 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test7">
    <skipped/>
  </testcase> <!-- test7 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test8">
    <skipped/>
  </testcase> <!-- test8 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test8">
    <skipped/>
  </testcase> <!-- test8 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test24">
    <skipped/>
  </testcase> <!-- test24 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test24">
    <skipped/>
  </testcase> <!-- test24 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test22">
    <skipped/>
  </testcase> <!-- test22 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test22">
    <skipped/>
  </testcase> <!-- test22 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test25">
    <skipped/>
  </testcase> <!-- test25 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test25">
    <skipped/>
  </testcase> <!-- test25 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test20">
    <skipped/>
  </testcase> <!-- test20 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test20">
    <skipped/>
  </testcase> <!-- test20 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test23">
    <skipped/>
  </testcase> <!-- test23 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test23">
    <skipped/>
  </testcase> <!-- test23 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test21">
    <skipped/>
  </testcase> <!-- test21 -->
  <system-out/>
  <testcase classname="Tests.AirbnbTests1" name="test21">
    <skipped/>
  </testcase> <!-- test21 -->
  <system-out/>
</testsuite> <!-- Tests.AirbnbTests1 -->
